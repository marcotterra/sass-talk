// variables
$primary-color: #f00;
$base-font-size: 16px;
$base-spacing: 8px;
$spacing-2x: 2;
$base-box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),
  0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);

body {
  font-size: $base-font-size;
}

// operations
.container {
  padding: $base-spacing * $spacing-2x;
}

// conditions
.button {
  @if $base-spacing < 8 {
    color: red;
  } @else {
    button: blue;
  }
}

// function
@function px-to-rem($px, $base: $base-font-size) {
  @return ($px / $base) * 1rem;
}

.button2 {
  font-size: px-to-rem(18px);
}

// mixin
@mixin add-shadow() {
  box-shadow: $base-box-shadow;
}

.button3 {
  @include add-shadow;
  color: red;
}

// extends
%button-style {
  padding: 16px;
  border: 1px solid red;
}

.button4 {
  @extend %button-style;
  color: blue;
}

// applies button class in button5 (see generated code)
.button5 {
  @extend .button;
  background-color: #e5e5e5;
}

// map
$sizes: (
  small: 8px,
  medium: 16px,
  large: 24px,
);

@each $size, $value in $sizes {
  .m-#{$size} {
    margin: $value;
  }
}

// list
$sizes: 8px, 16px, 24px;

@for $i from 0 to length($sizes) {
  .p-#{$i} {
    color: nth($sizes, $i + 1);
  }
}
